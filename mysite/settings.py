"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv
import dj_database_url

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9n7@)x8=%57t3-uglx238hkg$14%6d@r9w_ij!$bygi1!@_afc'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
#Invalid HTTP_HOST header: 'django-hfxu.onrender.com'. You may need to add 'django-hfxu.onrender.com


ALLOWED_HOSTS = [
    'django-app-2-l03i.onrender.com',
    'django-hfxu.onrender.com',
    '127.0.0.1',
    'django-app-0hq7.onrender.com',
    '8000-cs-81214997791-default.cs-asia-southeast1-fork.cloudshell.dev',
    '8000-cs-81214997791-default.cs-asia-southeast1-fork.cloudshell.dev',
    'localhost',
    'django-app-1-ej4m.onrender.com' # branch 03_dj_database_url
    ]

# Add the domain to CSRF_TRUSTED_ORIGINS
CSRF_TRUSTED_ORIGINS = [
    'https://8000-cs-81214997791-default.cs-asia-southeast1-fork.cloudshell.dev',
    'http://localhost:8000',
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'projects_management', # <-- Adicione sua nova app aqui
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
     # ... other middleware ...
    'django.middleware.csrf.CsrfViewMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}

 

#port = os.environ.get('PORT')
"""
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DATABASE_NAME'), #'test-postgres-dbtodo',  # The name of your PostgreSQL database
        'USER': os.environ.get('DATABASE_USER'), #'your_db_user',          # Your PostgreSQL username
        'PASSWORD': os.environ.get('DATABASE_PASSWORD'), #'your_db_password',  # Your PostgreSQL password
        'HOST': os.environ.get('DATABASE_HOST'), #'localhost',             # Or the IP address/hostname of your PostgreSQL server
        'PORT': '5432',                  # Default PostgreSQL port, change if yours is different
    }
}
"""
# "linw 113",line 113 postgres://stick35em10:None@None:None/None
print("line 113", f"postgres://{os.getenv('USER')}:{os.getenv('PASSWORD')}@{os.getenv('HOST')}:{os.getenv('PORT')}/{os.getenv('NAME')}")
# "line 115",
print("line 115", f"postgres://{os.environ.get('DATABASE_USER')}:{os.environ.get('DATABASE_PASSWORD')}@{os.environ.get('DATABASE_HOST')}:{os.environ.get('DATABASE_PORT')}/{os.environ.get('DATABASE_NAME')}")

ENGINE = 'django.db.backends.postgresql' #,
NAME = os.environ.get('DATABASE_NAME') #, #'test-postgres-dbtodo',  # The name of your PostgreSQL database
USER = os.environ.get('DATABASE_USER') #, #'your_db_user',          # Your PostgreSQL username
PASSWORD = os.environ.get('DATABASE_PASSWORD') #, #'your_db_password',  # Your PostgreSQL password
HOST = os.environ.get('DATABASE_HOST') #, #'localhost',             # Or the IP address/hostname of your PostgreSQL server
PORT = '5432' #,

import dj_database_url

"""
#DATABASE_URL = f'postgres://{USER}:{PASSWORD}@{HOST}:{PORT}/{NAME}'
#
DATABASES = {
    'default': dj_database_url.config(default=DATABASE_URL, conn_max_age=600, ssl_require=True)
}
"""

print("line 133", f"postgres://{USER}:{PASSWORD}@{HOST}:{PORT}/{NAME}")

db_url = f'postgres://{USER}:{PASSWORD}@{HOST}:{PORT}/{NAME}'
# "line 137 ",
print("line 138 ", f" {db_url}")  # Add this line
DATABASES = {
    'default': dj_database_url.config(
        default=db_url,
        conn_max_age=600,
        ssl_require=True
    )
}

#DATABASES = {
#    'default': dj_database_url.config(default=f'postgres://{USER}:{PASSWORD}@{HOST}:{PORT}/{NAME}', conn_max_age=600, ssl_require=True)
    #password@localhost:5432/dbname')
#}
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Remove or comment out this block if you don't have a global 'static' folder:
STATICFILES_DIRS = [
    # os.path.join(BASE_DIR, 'static'), # This line is causing the warning if the folder doesn't exist
]
# If STATICFILES_DIRS is empty, you can even set it to an empty list:
# STATICFILES_DIRS = []

# ... rest of your settings ...

# Define where your static files are served from in development
#STATIC_URL = '/static/'

# Define where Django should collect static files for deployment
# This is a full filesystem path. It should be outside of your project directory
# but within a directory that Render (or your hosting) can access.
# A common pattern is to put it in a 'staticfiles' directory at the root of your project.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Optional: List of paths to search for static files
# This is where Django looks for static files beyond those in app-specific 'static/' directories.
STATICFILES_DIRS = [
#    os.path.join(BASE_DIR, 'static'), # If you have a 'static' folder in your project root
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Add this block to configure the port
if 'PORT' in os.environ:
    port = os.environ.get('PORT')
    print(f"port = os.environ.get: {port}")